{% extends 'base.html.twig' %}

{% block title %}Détails de l'événement{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    {{ map_assets() }}
    <style>
        .action-buttons {
            display: flex;
            gap: 15px;
            margin-top: 20px;
        }

        .event-header {
            display: flex;
            gap: 20px;
            margin-bottom: 20px;
        }

        .event-image {
            flex: 0 0 60%;
        }

        .event-image img {
            width: 100%;
            height: auto;
            border-radius: 8px;
            object-fit: cover;
        }

        .weather-info {
            flex: 0 0 35%;
            background-color: #f8fafc;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.05);
            display: flex;
            flex-direction: column;
            justify-content: center;
        }

        .weather-info h4 {
            color: #1e40af;
            margin-bottom: 15px;
            font-size: 1.2rem;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .weather-info h4 i {
            color: #3b82f6;
        }

        .weather-info .weather-icon {
            text-align: center;
            margin-bottom: 10px;
        }

        .weather-info .weather-icon img {
            width: 64px;
            height: 64px;
        }

        .weather-info .temperature {
            font-size: 2rem;
            font-weight: bold;
            color: #1e40af;
            text-align: center;
            margin: 10px 0;
        }

        .weather-details {
            margin-top: 15px;
            padding-top: 15px;
            border-top: 1px solid #e2e8f0;
        }

        .weather-details p {
            margin: 8px 0;
            color: #334155;
            font-size: 0.95rem;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .weather-details i {
            width: 20px;
            color: #3b82f6;
        }

        .badge-card {
            background-color: white;
            border: 1px solid #e5e7eb;
            border-radius: 8px;
            padding: 10px 15px;
            min-width: 80px;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.2s ease;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
            text-decoration: none;
        }

        .badge-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

        .badge-card.like {
            color: #ef4444;
        }

        .badge-card.like:hover, .badge-card.like.active {
            background-color: #ef4444;
            color: white;
            border-color: #ef4444;
        }

        .badge-card.favorite {
            color: #f59e0b;
        }

        .badge-card.favorite:hover, .badge-card.favorite.active {
            background-color: #f59e0b;
            color: white;
            border-color: #f59e0b;
        }

        .badge-card.comment {
            color: #3b82f6;
        }

        .badge-card.comment:hover {
            background-color: #3b82f6;
            color: white;
            border-color: #3b82f6;
        }

        .badge-card i {
            font-size: 1.2rem;
            margin-bottom: 5px;
        }

        .badge-card .count {
            font-size: 0.9rem;
            font-weight: 500;
        }

        .badge-card .label {
            font-size: 0.8rem;
            margin-top: 2px;
        }

        .btn-back {
            background-color: #4361ee;
            color: white;
            padding: 10px 20px;
            border-radius: 25px;
            text-decoration: none;
            transition: all 0.3s ease;
            display: inline-flex;
            align-items: center;
            gap: 8px;
            margin-top: 20px;
        }

        .btn-back:hover {
            background-color: #3730a3;
            transform: translateY(-2px);
        }

        /* Styles pour les commentaires */
        #comments {
            margin-top: 40px;
            padding-top: 20px;
            border-top: 2px solid #eee;
        }

        .comments-title {
            font-size: 1.5rem;
            margin-bottom: 25px;
            color: #333;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .comments-title i {
            color: #3b82f6;
        }

        .comment-form {
            background: #f8fafc;
            padding: 20px;
            border-radius: 12px;
            margin-bottom: 30px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.05);
        }

        .comment-input {
            width: 100%;
            padding: 15px;
            border: 1px solid #e2e8f0;
            border-radius: 8px;
            margin-bottom: 15px;
            font-size: 15px;
            resize: vertical;
            min-height: 100px;
            transition: border-color 0.3s ease;
        }

        .comment-input:focus {
            outline: none;
            border-color: #3b82f6;
        }

        .btn-envoyer {
            background-color: #3b82f6;
            color: white;
            padding: 10px 20px;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-size: 15px;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .btn-envoyer:hover {
            background-color: #2563eb;
            transform: translateY(-1px);
        }

        .btn-envoyer i {
            font-size: 16px;
        }

        .comments-list {
            display: flex;
            flex-direction: column;
            gap: 20px;
        }

        .comment-item {
            background: white;
            padding: 20px;
            border-radius: 12px;
            border: 1px solid #e2e8f0;
            transition: transform 0.2s ease;
        }

        .comment-item:hover {
            transform: translateY(-2px);
        }

        .comment-header {
            display: flex;
            justify-content: space-between;
            margin-bottom: 12px;
            padding-bottom: 8px;
            border-bottom: 1px solid #f0f0f0;
        }

        .comment-date {
            font-size: 14px;
            color: #64748b;
        }

        .comment-content {
            font-size: 15px;
            color: #334155;
            line-height: 1.6;
        }

        .no-comments {
            text-align: center;
            padding: 40px;
            background: #f8fafc;
            border-radius: 12px;
            color: #64748b;
        }

        .no-comments i {
            font-size: 40px;
            color: #94a3b8;
            margin-bottom: 15px;
        }

        .no-comments p {
            font-size: 16px;
            margin: 10px 0;
        }

        #map {
            height: 400px;
            width: 100%;
            margin-bottom: 20px;
            border-radius: 8px;
        }

        @media (max-width: 768px) {
            .event-header {
                flex-direction: column;
            }

            .event-image, .weather-info {
                flex: 0 0 100%;
            }
        }
    </style>
{% endblock %}

{% block body %}
    <div class="container mt-4">
        <div class="row">
            <div class="col-md-8 offset-md-2">
                <div class="card">
                    <div class="card-body">
                        <h1 class="card-title">{{ evenement.nom }}</h1>
                        
                        <div class="event-header">
                            {% if evenement.photo %}
                                <div class="event-image">
                                    <img src="{{ asset('uploads/photos/' ~ evenement.photo) }}" alt="{{ evenement.nom }}" class="img-fluid">
                                </div>
                            {% endif %}
                            
                            {% if weather %}
                            <div class="weather-info">
                                <h4><i class="fas fa-cloud"></i> Météo à {{ evenement.lieu }}</h4>
                                <div class="weather-icon">
                                    <img src="https://openweathermap.org/img/wn/{{ weather.weather.icon }}@2x.png" alt="{{ weather.weather.description }}">
                                </div>
                                <div class="temperature">{{ weather.temperature.now|number_format(1) }}°C</div>
                                <p class="text-center">{{ weather.weather.description|capitalize }}</p>
                                <div class="weather-details">
                                    <p><i class="fas fa-temperature-high"></i> Ressenti: {{ weather.temperature.feels_like|number_format(1) }}°C</p>
                                    <p><i class="fas fa-tint"></i> Humidité: {{ weather.humidity }}%</p>
                                    <p><i class="fas fa-wind"></i> Vent: {{ weather.wind.speed }} km/h</p>
                                    <p><i class="fas fa-thermometer"></i> Min/Max: {{ weather.temperature.min|number_format(1) }}°C / {{ weather.temperature.max|number_format(1) }}°C</p>
                                </div>
                            </div>
                            {% elseif weatherError %}
                            <div class="weather-info">
                                <h4><i class="fas fa-exclamation-triangle text-warning"></i> Information météo</h4>
                                <div class="alert alert-warning mb-0">
                                    <p class="mb-0">{{ weatherError }}</p>
                                    <small class="d-block mt-2">Veuillez vérifier que le nom de la ville est correct.</small>
                                </div>
                            </div>
                            {% endif %}
                        </div>

                        <div class="mb-3">
                            <span class="badge bg-primary">{{ evenement.categorie|capitalize }}</span>
                            <span class="badge bg-info">{{ evenement.pays }}</span>
                            <span class="badge {% if evenement.status == 'annule' %}bg-danger{% elseif evenement.status == 'termine' %}bg-secondary{% else %}bg-success{% endif %}">
                                {{ evenement.status|capitalize }}
                            </span>
                        </div>

                        <div id="map"></div>

                        <div class="card-text">
                            <p><strong>Date:</strong> {{ evenement.date|date('d/m/Y') }}</p>
                            <p><strong>Heure:</strong> {{ evenement.heure|date('H:i') }}</p>
                            <p><strong>Lieu:</strong> {{ evenement.lieu }}</p>
                            <p><strong>Description:</strong></p>
                            <p>{{ evenement.description }}</p>
                        </div>

                        <div class="mt-4 action-buttons">
                            <button class="badge-card like {% if evenement.isLiked %}active{% endif %}" 
                                    data-url="{{ path('app_evenement_like', {'id': evenement.id}) }}">
                                <i class="{% if evenement.isLiked %}fas{% else %}far{% endif %} fa-heart"></i>
                                <span class="count">{{ evenement.likesCount }}</span>
                                <span class="label">J'aime</span>
                            </button>

                            <button class="badge-card favorite {% if evenement.isInterested %}active{% endif %}"
                                    data-url="{{ path('app_evenement_interesse', {'id': evenement.id}) }}">
                                <i class="{% if evenement.isInterested %}fas{% else %}far{% endif %} fa-star"></i>
                                <span class="label">Favoris</span>
                            </button>

                            <a href="#comments" class="badge-card comment">
                                <i class="far fa-comment"></i>
                                <span class="count">{{ evenement.commentaires|length }}</span>
                                <span class="label">Commenter</span>
                            </a>
                        </div>

                        <a href="{{ path('app_evenement_index') }}" class="btn-back">
                            <i class="fas fa-arrow-left"></i>
                            Retour à la liste
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <section id="comments">
        <h2 class="comments-title">
            <i class="fas fa-comments"></i>
            Commentaires ({{ evenement.commentaires|length }})
        </h2>
        
        <div class="comment-form">
            <textarea 
                id="comment-input"
                class="comment-input" 
                placeholder="Partagez votre avis sur cet événement..."
                required
            ></textarea>
            <button id="btn-envoyer" class="btn-envoyer" data-event-id="{{ evenement.id }}">
                <i class="fas fa-paper-plane"></i>
                Envoyer
            </button>
        </div>

        <div class="comments-list">
            {% if evenement.commentaires is not empty %}
                {% for commentaire in evenement.commentaires|sort((a, b) => b.date <=> a.date) %}
                    <div class="comment-item">
                        <div class="comment-header">
                            <span class="comment-date">
                                <i class="far fa-clock"></i>
                                {{ commentaire.date|date('d/m/Y H:i') }}
                            </span>
                        </div>
                        <div class="comment-content">
                            {{ commentaire.commentaire }}
                        </div>
                    </div>
                {% endfor %}
            {% else %}
                <div class="no-comments">
                    <i class="far fa-comments"></i>
                    <p>Aucun commentaire pour le moment.</p>
                    <p>Soyez le premier à partager votre avis !</p>
                </div>
            {% endif %}
        </div>
    </section>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            {% set mapConfig = map_config(evenement.latitude, evenement.longitude) %}
            const map = L.map('map').setView({{ mapConfig.center|json_encode|raw }}, {{ mapConfig.zoom }});
            L.tileLayer('{{ mapConfig.tileLayer }}', {
                attribution: '{{ mapConfig.attribution }}'
            }).addTo(map);

            L.marker({{ mapConfig.center|json_encode|raw }})
                .addTo(map)
                .bindPopup("{{ evenement.nom }}");

            const commentInput = document.getElementById('comment-input');
            const btnEnvoyer = document.getElementById('btn-envoyer');
            const commentsList = document.querySelector('.comments-list');
            const commentsTitle = document.querySelector('.comments-title');

            if (btnEnvoyer) {
                btnEnvoyer.addEventListener('click', async function() {
                    const eventId = this.dataset.eventId;
                    const content = commentInput.value.trim();
                    
                    if (!content) {
                        alert('Veuillez entrer un commentaire');
                        return;
                    }

                    try {
                        console.log('Envoi du commentaire:', { eventId, content });
                        
                        const response = await fetch(`/evenement/${eventId}/comment`, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'X-Requested-With': 'XMLHttpRequest',
                                'Accept': 'application/json'
                            },
                            body: JSON.stringify({ content })
                        });

                        console.log('Réponse reçue:', response.status);
                        
                        if (!response.ok) {
                            const errorData = await response.json();
                            throw new Error(errorData.error || 'Erreur réseau');
                        }

                        const data = await response.json();
                        console.log('Données reçues:', data);
                        
                        if (data.success) {
                            // Créer le nouveau commentaire
                            const newComment = document.createElement('div');
                            newComment.className = 'comment-item';
                            newComment.innerHTML = `
                                <div class="comment-header">
                                    <span class="comment-date">
                                        <i class="far fa-clock"></i>
                                        ${data.comment.createdAt}
                                    </span>
                                </div>
                                <div class="comment-content">
                                    ${data.comment.content}
                                </div>
                            `;

                            // Supprimer le message "Aucun commentaire" s'il existe
                            const noComments = document.querySelector('.no-comments');
                            if (noComments) {
                                noComments.remove();
                            }

                            // Ajouter le commentaire au début de la liste
                            if (commentsList.firstChild) {
                                commentsList.insertBefore(newComment, commentsList.firstChild);
                            } else {
                                commentsList.appendChild(newComment);
                            }

                            // Mettre à jour le titre et le badge
                            commentsTitle.innerHTML = `
                                <i class="fas fa-comments"></i>
                                Commentaires (${data.totalComments})
                            `;
                            
                            const commentBadge = document.querySelector('.badge-card.comment .count');
                            if (commentBadge) {
                                commentBadge.textContent = data.totalComments;
                            }

                            // Réinitialiser le formulaire
                            commentInput.value = '';
                        }
                    } catch (error) {
                        console.error('Erreur:', error);
                        alert('Une erreur est survenue lors de l\'envoi du commentaire');
                    }
                });

                // Ajouter la gestion de la touche Entrée
                commentInput.addEventListener('keypress', function(e) {
                    if (e.key === 'Enter' && !e.shiftKey) {
                        e.preventDefault();
                        btnEnvoyer.click();
                    }
                });
            }

            function handleButtonClick(button) {
                if (!button) return;

                button.addEventListener('click', async function(e) {
                    e.preventDefault();
                    const url = this.dataset.url;
                    if (!url) return;
                    
                    try {
                        const response = await fetch(url, {
                            method: 'POST',
                            headers: {
                                'X-Requested-With': 'XMLHttpRequest'
                            }
                        });

                        if (!response.ok) {
                            throw new Error('Erreur réseau');
                        }

                        const data = await response.json();
                        
                        if (data.success) {
                            const icon = this.querySelector('i');
                            if (this.classList.contains('like')) {
                                if (data.liked) {
                                    this.classList.add('active');
                                    icon.classList.remove('far');
                                    icon.classList.add('fas');
                                } else {
                                    this.classList.remove('active');
                                    icon.classList.remove('fas');
                                    icon.classList.add('far');
                                }
                                this.querySelector('.count').textContent = data.likesCount;
                            } else if (this.classList.contains('favorite')) {
                                if (data.interested) {
                                    this.classList.add('active');
                                    icon.classList.remove('far');
                                    icon.classList.add('fas');
                                } else {
                                    this.classList.remove('active');
                                    icon.classList.remove('fas');
                                    icon.classList.add('far');
                                }
                            }
                        }
                    } catch (error) {
                        console.error('Erreur:', error);
                        alert('Une erreur est survenue');
                    }
                });
            }

            // Initialiser les boutons
            handleButtonClick(document.querySelector('.badge-card.like'));
            handleButtonClick(document.querySelector('.badge-card.favorite'));
        });
    </script>
{% endblock %}
