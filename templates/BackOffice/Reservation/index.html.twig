{% extends 'BackOffice/base.html.twig' %}

{% block title %}Liste des Réservations{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        /* Keep only sort indicators */
        th.sort-asc::after {
            content: '↑';
            opacity: 1;
        }
        th.sort-desc::after {
            content: '↓';
            opacity: 1;
        }
        .sort-icon {
            cursor: pointer;
            padding: 0 5px;
            color: #0d6efd;
        }
        .sort-icon:hover {
            color: #0a58ca;
        }
        th {
            white-space: nowrap;
        }
    </style>
{% endblock %}

{% block content %}
    <div class="container-fluid">
        <h1 class="page-title">Liste des Réservations</h1>

        <div class="row mb-4">
            <div class="col-md-3">
                <div class="card">
                    <div class="card-body text-center">
                        <h3>{{ reservations|length }}</h3>
                        <p class="text-muted">Réservations</p>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card">
                    <div class="card-body text-center">
                        <h3>{% set total = 0 %}{% for r in reservations %}{% set total = total + r.nombrePersonne %}{% endfor %}{{ total }}</h3>
                        <p class="text-muted">Personnes</p>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card">
                    <div class="card-body text-center">
                        <h3>{{ uniqueOffres|length }}</h3>
                        <p class="text-muted">Offres Réservées</p>
                    </div>
                </div>
            </div>
        </div>

        <div class="row mb-3">
            <div class="col-12">
                <input type="text" class="form-control search-input" placeholder="Rechercher une réservation...">
            </div>
        </div>

        <div class="row mb-3">
            <div class="col-md-4">
                <div class="form-group">
                    <label>Offre</label>
                    <select class="form-control" id="offre">
                        <option value="">Toutes les offres</option>
                        {% for offre in uniqueOffres %}
                            <option value="{{ offre.titre }}">{{ offre.titre }}</option>
                        {% endfor %}
                    </select>
                </div>
            </div>
            <div class="col-md-4">
                <div class="form-group">
                    <label>Nombre de personnes</label>
                    <select class="form-control" id="filter-personnes">
                        <option value="">Tous</option>
                        <option value="1">1 personne</option>
                        <option value="2">2 personnes</option>
                        <option value="3">3 personnes</option>
                        <option value="4+">4 personnes ou plus</option>
                    </select>
                </div>
            </div>
        </div>

        <div class="card">
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th>ID <span class="sort-icon">↕</span></th>
                                <th>CLIENT <span class="sort-icon">↕</span></th>
                                <th>OFFRE <span class="sort-icon">↕</span></th>
                                <th>PERSONNES <span class="sort-icon">↕</span></th>
                                <th>CONTACT <span class="sort-icon">↕</span></th>
                                <th>ACTIONS</th>
                            </tr>
                        </thead>
                        <tbody>
                            {% for reservation in reservations %}
                                <tr>
                                    <td>{{ reservation.id }}</td>
                                    <td>{{ reservation.nom }}<br><small>{{ reservation.email }}</small></td>
                                    <td>{{ reservation.offre.titre }}<br><small>{{ reservation.offre.prix }}€ par personne</small></td>
                                    <td>{{ reservation.nombrePersonne }}</td>
                                    <td>{{ reservation.telephone }}</td>
                                    <td>
                                        <a href="{{ path('admin_reservation_edit', {'id': reservation.id}) }}" class="btn btn-primary btn-sm">Modifier</a>
                                        <a href="{{ path('admin_reservation_delete', {'id': reservation.id}) }}" class="btn btn-danger btn-sm">Supprimer</a>
                                    </td>
                                </tr>
                            {% endfor %}
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-md-6">
                <div id="columnChart"></div>
            </div>
            <div class="col-md-6">
                <div id="pieChart"></div>
            </div>
        </div>
    </div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
    <script>
        google.charts.load('current', {'packages':['corechart']});
        google.charts.setOnLoadCallback(drawCharts);

        function drawCharts() {
            // Données pour les graphiques
            var reservationData = {};
            {% for r in reservations %}
                var offreId = '{{ r.offre.titre }}';
                if (!reservationData[offreId]) {
                    reservationData[offreId] = {
                        reservations: 0,
                        personnes: 0
                    };
                }
                reservationData[offreId].reservations++;
                reservationData[offreId].personnes += {{ r.nombrePersonne }};
            {% endfor %}

            // Column Chart
            var columnData = new google.visualization.DataTable();
            columnData.addColumn('string', 'Offre');
            columnData.addColumn('number', 'Réservations');
            columnData.addColumn('number', 'Personnes');

            for (var offre in reservationData) {
                columnData.addRow([
                    offre,
                    reservationData[offre].reservations,
                    reservationData[offre].personnes
                ]);
            }

            var columnChart = new google.visualization.ColumnChart(document.getElementById('columnChart'));
            columnChart.draw(columnData, {
                title: 'Statistiques des Réservations',
                height: 400,
                hAxis: {title: 'Offres'},
                vAxes: {
                    0: {title: 'Nombre'},
                    1: {title: 'Personnes'}
                },
                seriesType: 'bars'
            });

            // Pie Chart
            var pieData = new google.visualization.DataTable();
            pieData.addColumn('string', 'Offre');
            pieData.addColumn('number', 'Réservations');

            for (var offre in reservationData) {
                pieData.addRow([offre, reservationData[offre].reservations]);
            }

            var pieChart = new google.visualization.PieChart(document.getElementById('pieChart'));
            pieChart.draw(pieData, {
                title: 'Répartition des Réservations',
                height: 400,
                is3D: true
            });
        }

        // Redessiner les graphiques lors du redimensionnement
        window.addEventListener('resize', drawCharts);
    </script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const searchInput = document.querySelector('input[placeholder="Rechercher une réservation..."]');
            const tbody = document.querySelector('tbody');
            let timeout = null;

            function performSearch() {
                const search = searchInput.value.trim();
                
                fetch(`/reservation/admin/reservation/search?search=${encodeURIComponent(search)}`)
                    .then(response => response.json())
                    .then(reservations => {
                        tbody.innerHTML = '';
                        reservations.forEach(reservation => {
                            tbody.innerHTML += `
                                <tr>
                                    <td>${reservation.id}</td>
                                    <td>
                                        ${reservation.nom}<br>
                                        <small>${reservation.email}</small>
                                    </td>
                                    <td>
                                        ${reservation.offre.titre}<br>
                                        <small>${reservation.offre.prix}</small>
                                    </td>
                                    <td>${reservation.personnes}</td>
                                    <td>${reservation.contact}</td>
                                    <td>
                                        <div class="btn-group">
                                            <a href="/reservation/admin/reservation/${reservation.id}/edit" class="btn btn-primary btn-sm">Modifier</a>
                                            <button onclick="if(confirm('Êtes-vous sûr de vouloir supprimer cette réservation ?')) window.location.href='/reservation/admin/reservation/${reservation.id}/delete'" class="btn btn-danger btn-sm">Supprimer</button>
                                        </div>
                                    </td>
                                </tr>
                            `;
                        });
                    });
            }

            // Debounce search to avoid too many requests
            searchInput.addEventListener('input', function() {
                clearTimeout(timeout);
                timeout = setTimeout(performSearch, 300);
            });
        });
    </script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const searchInput = document.querySelector('input[placeholder="Rechercher une réservation..."]');
            
            searchInput.addEventListener('input', function() {
                const searchText = this.value.toLowerCase();
                const rows = document.querySelectorAll('tbody tr');
                
                rows.forEach(row => {
                    const id = row.querySelector('td:nth-child(1)').textContent;
                    const client = row.querySelector('td:nth-child(2)').textContent.toLowerCase();
                    const offre = row.querySelector('td:nth-child(3)').textContent.toLowerCase();
                    
                    if (id.includes(searchText) || 
                        client.includes(searchText) || 
                        offre.includes(searchText)) {
                        row.style.display = '';
                    } else {
                        row.style.display = 'none';
                    }
                });
            });
        });
    </script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const searchInput = document.querySelector('input[placeholder="Rechercher une réservation..."]');
            
            searchInput.addEventListener('input', function() {
                const searchText = this.value.trim();
                const rows = document.querySelectorAll('tbody tr');
                
                // Only search if input is a number
                if (/^\d+$/.test(searchText)) {
                    rows.forEach(row => {
                        const id = row.querySelector('td:first-child').textContent.trim();
                        row.style.display = (id === searchText) ? '' : 'none';
                    });
                }
            });
        });
    </script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const offreSelect = document.querySelector('select#offre');
            const personnesInput = document.querySelector('select#filter-personnes');
            const rows = document.querySelectorAll('tbody tr');

            function filterTable() {
                const selectedOffre = offreSelect ? offreSelect.value.toLowerCase() : '';
                const selectedPersonnes = personnesInput ? personnesInput.value : '';

                rows.forEach(row => {
                    const offre = row.querySelector('td:nth-child(3)').textContent.toLowerCase();
                    const personnes = row.querySelector('td:nth-child(4)').textContent;

                    const matchOffre = !selectedOffre || offre.includes(selectedOffre);
                    const matchPersonnes = !selectedPersonnes || personnes === selectedPersonnes;

                    row.style.display = (matchOffre && matchPersonnes) ? '' : 'none';
                });
            }

            if (offreSelect) offreSelect.addEventListener('change', filterTable);
            if (personnesInput) personnesInput.addEventListener('input', filterTable);
        });
    </script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const personnesInput = document.querySelector('input[placeholder="Filtrer par places minimum"]');
            const rows = document.querySelectorAll('tbody tr');

            personnesInput.addEventListener('input', function() {
                const filterText = this.value.trim();
                
                rows.forEach(row => {
                    const personnesCell = row.querySelector('td:nth-child(4)').textContent;
                    const personnesNumber = parseInt(personnesCell.split(' ')[0]);
                    
                    if (!filterText || personnesNumber >= parseInt(filterText)) {
                        row.style.display = '';
                    } else {
                        row.style.display = 'none';
                    }
                });
            });
        });
    </script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const input = document.querySelector('input[placeholder="Tous"]');
            if (input) {
                input.addEventListener('input', function() {
                    const searchValue = this.value;
                    document.querySelectorAll('tbody tr').forEach(row => {
                        const personnes = row.children[4].textContent;
                        row.style.display = personnes.includes(searchValue) ? '' : 'none';
                    });
                });
            }
        });
    </script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const table = document.querySelector('table');
            const headers = table.querySelectorAll('th');
            let currentSort = { column: null, asc: true };

            headers.forEach((header, index) => {
                if (index > 0) { // Skip first column (ID)
                    header.style.cursor = 'pointer';
                    header.addEventListener('click', () => {
                        const rows = Array.from(table.querySelectorAll('tbody tr'));
                        
                        // Toggle sort direction if clicking same column
                        if (currentSort.column === index) {
                            currentSort.asc = !currentSort.asc;
                        } else {
                            currentSort = { column: index, asc: true };
                        }
                        
                        // Sort rows
                        rows.sort((a, b) => {
                            let aVal = a.children[index].textContent.trim();
                            let bVal = b.children[index].textContent.trim();
                            
                            // Handle numeric values
                            if (index === 3) { // PERSONNES column
                                aVal = parseInt(aVal) || 0;
                                bVal = parseInt(bVal) || 0;
                            }
                            
                            if (currentSort.asc) {
                                return aVal > bVal ? 1 : -1;
                            } else {
                                return aVal < bVal ? 1 : -1;
                            }
                        });
                        
                        // Update table
                        const tbody = table.querySelector('tbody');
                        rows.forEach(row => tbody.appendChild(row));
                        
                        // Update sort indicators
                        headers.forEach(h => h.classList.remove('sort-asc', 'sort-desc'));
                        header.classList.add(currentSort.asc ? 'sort-asc' : 'sort-desc');
                    });
                }
            });
        });
    </script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const idHeader = document.querySelector('th:first-child');
            const tbody = document.querySelector('tbody');
            let isAscending = true;

            idHeader.style.cursor = 'pointer';
            
            idHeader.addEventListener('click', function() {
                const rows = Array.from(tbody.querySelectorAll('tr'));
                
                // Sort rows by ID
                rows.sort((a, b) => {
                    const idA = parseInt(a.querySelector('td:first-child').textContent);
                    const idB = parseInt(b.querySelector('td:first-child').textContent);
                    return isAscending ? idA - idB : idB - idA;
                });
                
                // Toggle sort direction
                isAscending = !isAscending;
                
                // Update arrow indicator
                idHeader.classList.toggle('sort-asc', isAscending);
                idHeader.classList.toggle('sort-desc', !isAscending);
                
                // Reorder rows
                rows.forEach(row => tbody.appendChild(row));
            });
        });
    </script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const searchInput = document.querySelector('input[placeholder="Rechercher une réservation..."]');
            const offreSelect = document.querySelector('select');
            const personnesInput = document.querySelector('input[placeholder="Tous"]');
            const rows = document.querySelectorAll('tbody tr');

            function filterTable() {
                const search = searchInput.value.toLowerCase();
                const selectedOffre = offreSelect.value.toLowerCase();
                const selectedPersonnes = personnesInput.value;

                rows.forEach(row => {
                    const id = row.querySelector('td:nth-child(1)').textContent.toLowerCase();
                    const client = row.querySelector('td:nth-child(2)').textContent.toLowerCase();
                    const offre = row.querySelector('td:nth-child(3)').textContent.toLowerCase();
                    const personnes = row.querySelector('td:nth-child(4)').textContent;

                    const matchSearch = !search || 
                        id.includes(search) || 
                        client.includes(search) || 
                        offre.includes(search);
                    const matchOffre = !selectedOffre || offre.includes(selectedOffre);
                    const matchPersonnes = !selectedPersonnes || personnes.includes(selectedPersonnes);

                    row.style.display = (matchSearch && matchOffre && matchPersonnes) ? '' : 'none';
                });
            }

            searchInput.addEventListener('input', filterTable);
            offreSelect.addEventListener('change', filterTable);
            personnesInput.addEventListener('input', filterTable);
        });
    </script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const table = document.querySelector('table');
            const headers = table.querySelectorAll('th');
            
            headers.forEach((header, index) => {
                header.style.cursor = 'pointer';
                header.addEventListener('click', () => {
                    const rows = Array.from(table.querySelectorAll('tbody tr'));
                    const isAscending = header.classList.contains('sort-asc');
                    
                    // Clear all sort classes
                    headers.forEach(h => h.classList.remove('sort-asc', 'sort-desc'));
                    
                    // Sort rows
                    rows.sort((a, b) => {
                        let aVal = a.children[index].textContent.trim();
                        let bVal = b.children[index].textContent.trim();
                        
                        // Handle numeric values for ID and PERSONNES columns
                        if (index === 0 || index === 3) {
                            aVal = parseInt(aVal) || 0;
                            bVal = parseInt(bVal) || 0;
                        }
                        
                        if (isAscending) {
                            header.classList.add('sort-desc');
                            return bVal < aVal ? -1 : 1;
                        } else {
                            header.classList.add('sort-asc');
                            return aVal < bVal ? -1 : 1;
                        }
                    });
                    
                    // Update table
                    const tbody = table.querySelector('tbody');
                    rows.forEach(row => tbody.appendChild(row));
                });
            });
        });
    </script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const table = document.querySelector('table');
            const sortIcons = document.querySelectorAll('.sort-icon');
            
            sortIcons.forEach((icon, index) => {
                icon.addEventListener('click', () => {
                    const rows = Array.from(table.querySelectorAll('tbody tr'));
                    const isAsc = icon.textContent === '↕' || icon.textContent === '↓';
                    
                    // Update sort icon
                    sortIcons.forEach(i => i.textContent = '↕');
                    icon.textContent = isAsc ? '↑' : '↓';
                    
                    // Sort rows
                    rows.sort((a, b) => {
                        let aVal = a.children[index].textContent.trim();
                        let bVal = b.children[index].textContent.trim();
                        
                        // Handle numeric values for ID and PERSONNES columns
                        if (index === 0 || index === 3) {
                            aVal = parseInt(aVal) || 0;
                            bVal = parseInt(bVal) || 0;
                        }
                        
                        return isAsc ? 
                            (aVal > bVal ? 1 : -1) : 
                            (bVal > aVal ? 1 : -1);
                    });
                    
                    // Update table
                    const tbody = table.querySelector('tbody');
                    rows.forEach(row => tbody.appendChild(row));
                });
            });
        });
    </script>
{% endblock %}
